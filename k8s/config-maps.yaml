apiVersion: v1
kind: ConfigMap
metadata:
  name: alloy-config
  namespace: telemetry-system
data:
  config.alloy: |
    // OTLP Receiver - Collects telemetry data via OTLP protocol
    otelcol.receiver.otlp "default" {
      // HTTP endpoint for OTLP over HTTP
      http {
        endpoint = "0.0.0.0:4318"
      }
      
      // gRPC endpoint for OTLP over gRPC
      grpc {
        endpoint = "0.0.0.0:4317"
      }
      
      // Route the received data to the batch processor
      output {
        traces  = [otelcol.processor.batch.default.input]
        metrics = [otelcol.processor.batch.default.input]
        logs    = [otelcol.processor.batch.default.input]
      }
    }

    // Container log collection (for Docker/k8s logs)
    otelcol.receiver.filelog "container_logs" {
      include = ["/var/lib/docker/containers/*/*.log"]
      
      // These operators process container logs in the Kubernetes/Docker format
      operators = [
        // Extract container metadata from the filename
        {
          type = "regex_parser",
          regex = "^/var/lib/docker/containers/(?P<container_id>[^/]+)/(?P<file_name>.+)$",
          parse_from = "attributes.file.path",
        },
        // Parse the Docker JSON log format
        {
          type = "json_parser",
          parse_from = "body",
          timestamp = {
            parse_from = "attributes.time",
            layout = "%Y-%m-%dT%H:%M:%S.%LZ",
          },
        },
        // Extract log line from Docker's log field
        {
          type = "move",
          from = "attributes.log",
          to = "body",
        },
        // Try to parse JSON from log messages that are JSON
        {
          type = "json_parser",
          parse_from = "body",
          if = "EXPR($ matches '^{')",
        },
      ]
      
      output {
        logs = [otelcol.processor.batch.default.input]
      }
    }

    // Application pod logs collection
    otelcol.receiver.filelog "app_pod_logs" {
      include = ["/var/log/pods/*/*/*.log"]
      
      // Process Kubernetes pod logs format
      operators = [
        // Extract pod and container metadata from the filepath
        {
          type = "regex_parser",
          regex = "^/var/log/pods/(?P<pod_uid>[^/]+)/(?P<container_name>[^/]+)/(?P<file_number>[0-9]+).log$",
          parse_from = "attributes.file.path",
        },
        // Parse the log JSON format
        {
          type = "json_parser",
          parse_from = "body",
          timestamp = {
            parse_from = "attributes.time",
            layout = "%Y-%m-%dT%H:%M:%S.%LZ",
          },
        },
        // Extract log content
        {
          type = "move",
          from = "attributes.log",
          to = "body",
        },
        // Try to parse JSON for structured log messages
        {
          type = "json_parser",
          parse_from = "body",
          if = "EXPR($ matches '^{')",
        },
      ]
      
      output {
        logs = [otelcol.processor.batch.default.input]
      }
    }

    // System log collection
    otelcol.receiver.filelog "system_logs" {
      include = ["/var/log/*.log", "/var/log/messages", "/var/log/syslog"]
      
      output {
        logs = [otelcol.processor.batch.default.input]
      }
    }

    // Batch processor - Efficiently batches telemetry data
    otelcol.processor.batch "default" {
      timeout = "1s"
      send_batch_size = 1024
      
      // Route processed data to the appropriate exporters
      output {
        metrics = [otelcol.exporter.prometheus.default.input]
        logs    = [otelcol.exporter.loki.default.input]
        traces  = [otelcol.exporter.otlp.tempo.input]
      }
    }

    // Prometheus exporter - For metrics
    otelcol.exporter.prometheus "default" {
      // Send metrics to Prometheus
      forward_to = [prometheus.remote_write.prom.receiver]
    }

    // Prometheus remote write configuration
    prometheus.remote_write "prom" {
      // Configure Prometheus endpoint
      endpoint {
        url = "http://prometheus.telemetry-system.svc.cluster.local:9090/api/v1/push"
      }
    }

    // Loki exporter - For logs
    otelcol.exporter.loki "default" {
      // Forward logs to Loki
      forward_to = [loki.write.logs.receiver]
    }

    // Loki write configuration - Simple version
    loki.write "logs" {
      endpoint {
        url = "http://loki.telemetry-system.svc.cluster.local:3100/loki/api/v1/push"
      }
    }

    // Tempo exporter - For traces
    otelcol.exporter.otlp "tempo" {
      // Configure client for sending traces to Tempo
      client {
        endpoint = "tempo.telemetry-system.svc.cluster.local:4317"
        tls {
          insecure = true
        }
      }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: tempo-config
  namespace: telemetry-system
data:
  tempo.yaml: |
    server:
      http_listen_port: 3200
    storage:
      trace:
        backend: local
        local:
          path: /tmp/tempo/blocks
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: loki-config
  namespace: telemetry-system
data:
  loki.yaml: |
    auth_enabled: false
    server:
      http_listen_port: 3100
    ingester:
      lifecycler:
        ring:
          kvstore:
            store: inmemory
          replication_factor: 1
      chunk_idle_period: 5m
      chunk_retain_period: 30s
    schema_config:
      configs:
        - from: 2020-05-15
          store: boltdb
          object_store: filesystem
          schema: v11
          index:
            prefix: index_
            period: 24h
    storage_config:
      boltdb:
        directory: /tmp/loki/index
      filesystem:
        directory: /tmp/loki/chunks
    # Settings to ensure all logs can be processed
    limits_config:
      reject_old_samples: false
      reject_old_samples_max_age: 168h
      max_cache_freshness_per_query: 10m
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: loki-runtime-config
  namespace: telemetry-system
data:
  runtime-config.yaml: |
    {}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: telemetry-system
data:
  datasources.yaml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://prometheus:9090
        isDefault: false
      - name: Tempo
        type: tempo
        access: proxy
        url: http://tempo:3200
        isDefault: false
      - name: Loki
        type: loki
        access: proxy
        url: http://loki:3100
        isDefault: true
